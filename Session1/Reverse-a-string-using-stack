/**
 * @file Reverse-a-string-using-stack
 * @brief Program to reverse a string using stack data structure
 * @author SkillLab Challengers
 * @date 2024
 * 
 * This program demonstrates the implementation of a stack-based string reversal.
 * It uses an array-based stack to store characters and then pops them in reverse order.
 * 
 * Key Features:
 * - Stack-based reversal algorithm
 * - Input validation for buffer overflow prevention
 * - Clean memory management
 */

#include <stdio.h>
#include <string.h>

// Define maximum size for strings and stack to prevent buffer overflow
#define MAX 100

/**
 * @brief Main function to reverse a string using stack data structure
 * 
 * Algorithm:
 * 1. Read input string from user
 * 2. Push each character onto the stack (LIFO structure)
 * 3. Pop characters from stack to create reversed string
 * 4. Display the reversed string
 * 
 * @return int Returns 0 on successful execution
 */
int main() {
    // Variable declarations
    char str[MAX];         // Input string buffer
    char stack[MAX];       // Stack to hold characters for reversal
    char reversed[MAX];    // Output string buffer for reversed string
    int top = -1;          // Stack pointer (initialized to -1 for empty stack)
    
    // Display prompt to user
    printf("Enter a string (max %d characters): ", MAX - 1);
    
    // Security: Use fgets instead of scanf to prevent buffer overflow
    // fgets is safer as it limits input length
    if (fgets(str, MAX, stdin) == NULL) {
        fprintf(stderr, "Error: Failed to read input\n");
        return 1;
    }
    
    // Remove trailing newline character if present
    size_t len = strlen(str);
    if (len > 0 && str[len - 1] == '\n') {
        str[len - 1] = '\0';
        len--;
    }
    
    // Input validation: Check for empty string
    if (len == 0) {
        printf("Error: Empty string provided\n");
        return 1;
    }
    
    // Push Phase: Insert each character from input string onto the stack
    // Loop through each character until null terminator
    for (int i = 0; str[i] != '\0'; i++) {
        // Boundary check: Prevent stack overflow
        if (top >= MAX - 1) {
            fprintf(stderr, "Error: Stack overflow - string too long\n");
            return 1;
        }
        
        // Pre-increment top and then insert character
        // This maintains stack property: top always points to last inserted element
        stack[++top] = str[i];
    }
    
    // Pop Phase: Retrieve characters from stack in reverse order
    // Since stack is LIFO (Last In First Out), characters come out reversed
    for (int i = 0; i <= top; i++) {
        // Access stack from top to bottom
        // top-i gives us the reverse order
        reversed[i] = stack[top - i];
    }
    
    // Null-terminate the reversed string to make it a valid C string
    reversed[top + 1] = '\0';
    
    // Display the result
    printf("Original string: %s\n", str);
    printf("Reversed string: %s\n", reversed);
    
    // Successful execution
    return 0;
}

/**
 * Security Improvements Made:
 * 1. Replaced scanf() with fgets() to prevent buffer overflow attacks
 * 2. Added input validation for empty strings
 * 3. Added boundary checks for stack overflow
 * 4. Proper null-termination of strings
 * 5. Added error handling with descriptive error messages
 * 6. Used size_t for length calculations (correct type)
 * 7. Added return value checking for fgets()
 * 
 * Readability Improvements Made:
 * 1. Added comprehensive file-level documentation
 * 2. Added function-level documentation with algorithm description
 * 3. Added inline comments for each logical block
 * 4. Clear variable names with purpose comments
 * 5. Separated push and pop phases with clear comments
 * 6. Added visual separation between logical sections
 * 7. Consistent indentation and formatting
 * 
 * Maintainability Improvements Made:
 * 1. Modular code structure with clear phases
 * 2. Easy to extend (e.g., could extract stack operations into functions)
 * 3. Clear error handling makes debugging easier
 * 4. Constants defined at top for easy modification
 * 5. Proper return codes for success/failure
 */
